<?xml version="1.0" encoding="utf-8"?>
<layout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools">

    <data>

        <variable
            name="binding"
            type="com.example.androiddevpractice.topics.architecturecomponents.DataBindingFragment" />

    </data>

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <androidx.appcompat.widget.LinearLayoutCompat
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:orientation="vertical"
            tools:context=".topics.architecturecomponents.DataBindingFragment">

            <TextView
                android:id="@+id/tv_title"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginTop="@dimen/default_top"
                android:text="DataBinding"
                android:textAlignment="center"
                android:textSize="@dimen/title_size"
                android:transitionName="transition_title" />

            <com.google.android.material.textview.MaterialTextView
                android:id="@+id/materialTextView3"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="@dimen/default_start"
                android:layout_marginTop="@dimen/default_top"
                android:layout_marginEnd="@dimen/default_end"
                android:onClick="@{(view) -> binding.showText(view)}"
                android:text="The Data Binding library is a support library that allows you to bind UI components in your layout o data sources in your app using a declarative format. DataBinding is the replacement for findViewById." />

            <com.google.android.material.textview.MaterialTextView
                android:id="@+id/tv_expression"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="@dimen/default_start"
                android:layout_marginTop="@dimen/default_top"
                android:layout_marginEnd="@dimen/default_end"
                android:onClick="@{(view) -> binding.showText(view)}"
                android:text="Expression Language:\nAllows you to write expressions that connect variables to the view in the layout. The DB library generates the classes required to bind views in the layout with your data objects. \nVariable: Allows you to find data objects and methods to views in the layout."
                android:theme="@style/TextViewDescription" />

            <com.google.android.material.textview.MaterialTextView
                android:id="@+id/tv_generated_classes"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="@dimen/default_start"
                android:layout_marginTop="@dimen/default_top"
                android:layout_marginEnd="@dimen/default_end"
                android:onClick="@{(view) -> binding.showText(view)}"
                android:text="Generated Classes: \nThe DB will generate binding class that are used to access the layout's variables and views. The generated class links the layout variables with the views in the layout. "
                android:theme="@style/TextViewDescription" />

            <com.google.android.material.textview.MaterialTextView
                android:id="@+id/tv_binding_object"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="@dimen/default_start"
                android:layout_marginTop="@dimen/default_top"
                android:layout_marginEnd="@dimen/default_end"
                android:onClick="@{(view) -> binding.showText(view)}"
                android:text="Binding Object: \nThe binding object is created immediately after inflating the layout to ensure that the view hierarchy isn't modified before it binds to the views with expressions in the layout. Use DataBindingUtil.inflate to inflate the binding class. In a fragment you will need to return the root of Binding object in onCreateView()."
                android:theme="@style/TextViewDescription" />


            <com.google.android.material.textview.MaterialTextView
                android:id="@+id/tv_view_with_id"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="@dimen/default_start"
                android:layout_marginTop="@dimen/default_top"
                android:layout_marginEnd="@dimen/default_end"
                android:onClick="@{(view) -> binding.showText(view)}"
                android:text="View with ID: \nThe DB creates a immutable filed in the binding class for each view that  has an ID in the layout. The library extracts the views including the IDs fromt eh view hierarchy in a single pass. This is faster than calling findViewById for everyview. "
                android:theme="@style/TextViewDescription" />

            <com.google.android.material.textview.MaterialTextView
                android:id="@+id/tv_observable_data"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="@dimen/default_start"
                android:layout_marginTop="@dimen/default_top"
                android:layout_marginEnd="@dimen/default_end"
                android:onClick="@{(view) -> binding.showText(view)}"
                android:text="Observable data: \nThe DB Library can make objects, fields or collections observable. Any object can be used with data binding but modifying the object doesn't automatically cause the UI to update. DB can be used to give objects the ability to notify other objects, known as listeners, when data is chagned. "
                android:theme="@style/TextViewDescription" />

            <com.google.android.material.textview.MaterialTextView
                android:id="@+id/tv_twoway_databinding"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginStart="@dimen/default_start"
                android:layout_marginTop="@dimen/default_top"
                android:layout_marginEnd="@dimen/default_end"
                android:onClick="@{(view) -> binding.showText(view)}"
                android:text="Two-way DataBinding:\nUsing one-way data binding, you can set a value on an attribute and set a listener that reacts to a change in that attribute. The @={} notiation, includes the = sign, receives data changes to the property and listen to user updates at the same time. "
                android:theme="@style/TextViewDescription" />

        </androidx.appcompat.widget.LinearLayoutCompat>
    </ScrollView>
</layout>