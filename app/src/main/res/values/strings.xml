<resources>
    <string name="app_name">AndroidDevPractice</string>
    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="wrong_password">Wrong Password</string>
    <string name="place_holder_instructions">Click on an icon to move it to the center and in large it.</string>
    <string name="WhatIsMotionLayout">Motion Layout is a subclass of Constraint Layout, bridging he gap between layout transitions and complex motion handing, offering a mix of features between the property, animation framework, TransitionManager and Coordinator layout.</string>
    <string name="what_is_a_radio_button">RadioButton: is a two state button that can be checked or unchecked. Once check the user can\'t uncheck it.</string>
    <string name="what_is_a_radio_group">RadioGroup: is a multiple-exlusion scope for a set of radio buttons. Checking one RadioButton in the group will uncheck an previously checked button in the same group.</string>
    <string name="preference_file_key">AndroidDevPracticeFile</string>
    <string name="what_is_a_toggle_button">Toggle Button: Allows the user to change a setting between two states.</string>
    <string name="off">OFF</string>
    <string name="on">ON</string>
    <string name="what_is_a_switch">Switch: Is a two-state toggle switch that can select between two options. The user may drag a thumb back and forth of tap to toggle. Switch compat is backwards compatible to API 7.</string>
    <string name="what_is_a_tool_tip">ToolTip: A Tool tip is a small is a small descriptive message that appears near a view when users long press the view or hover their mouse over it.</string>
    <string name="what_is_a_notifiation">Notification: provides short, timely information about events in your app while it\'s not in use.</string>
    <string name="what_is_a_category_call">CATEGORY_CALL: incoming call or similar synchronous communication request</string>
    <string name="what_is_a_cateogory_alarm">CATEGORY_ALARM: Alarm or timer</string>
    <string name="what_is_a_category_event">CATEGORY_EVENT: Notification category calendar event</string>
    <string name="what_is_Notification_priority">Notification Priority: Is an indication of how much of the user\'s valuable attention should be consumed by this notification.</string>
    <string name="what_is_visibility_public">VISIBILITY_PUBLIC: shows the notification\'s full content</string>
    <string name="what_is_visibility_secret">VISIBILITY_SECRET: doesn\'t show any part of this notification on the screen</string>
    <string name="what_is_visibility_private">VISIBILITY_PRIVATE: shows basic information, such as the notifications icon adn the content title, but hides the notifications full content</string>
    <string name="notification_what_is_full_screen">Full Screen: Heads up notification doesn\'t close</string>
    <string name="notification_what_is_on_going">OnGoing: You cannot swipe the notification away.</string>
    <string name="notification_what_is_set_show_when">SetShowWhen: Controls whether the timestamp set with is displayed in the notification</string>
    <string name="system_ui_what_is_system_ui">The System UI is screen bars dedicated to the display of notification, communication of device status, and device navigation. Typically the system bar displayed concurrently with the app.</string>
    <string name="toast_what_is_a_toast">Toast: is a view containing a quick little message for the user, the view appears as a floating view over the application.</string>
    <string name="snackbar_what_is_a_snackbar">Snackbar: Is attached to a view. The snackbar provides basic functionality if it is attached to any object derived fromt he view class</string>
    <string name="activity_what_is">An activity is a single focused thing that the user can do. Activities interact with the user, so the Activity class takes care of creating a window fro you in which you can place your UI with setContentView. Activities are oftten presented to the user as full screen windows they can also be used in other ways as floating windows</string>
    <string name="activity_configuration_change_summary">Configuration change occurs when the orientation of the device changes, a configuration change results in reloading of the activity and a new layout depending on orientation. You can create you unique layouts for portrait or lands scape mode.</string>
    <string name="activity_process_lifecycle_summary">The Android system attempts to keep process around fo as long as possible, if memory needs to be freed up then process can be terminated. The four states of importance are listed here and will determine what process get terminated.</string>
    <string name="activity_saving_persistent_data_summary">Saving persistent data will save the data as a key value pair into a file to be loaded later.</string>
    <string name="title">TOPIC TITLE</string>
    <string name="activity_onCreate">onCreate():\nThis Call back fires when the system first creates an activity, onCreate handles basic application startup logic that should happen only once for the entire life of the activity. This method receives the savedInstanceState</string>
    <string name="activity_onRestart">onRestart():\nCalled after onStop() when the current activity is being re-displayed to the user</string>
    <string name="activity_onStart">onStart():\nMakes the activity visible to the user, as the app prepares for the activity to enter the foreground and become interactive</string>
    <string name="activity_onResume">onResume():\nThe app comes to the foreground, and then the system invokes onResume(). The user interacts with the app in this state, the app will stay in this state until something happens to take focus away from the app.</string>
    <string name="activity_onPause">onPause():\nWhen the activity leaves the foreground it will enter the onPause() state. Use onPause() to adjust operations that should not continue while the activity is not in active state. OnPause can also be used to release system resources.</string>
    <string name="activity_onStop">onStop():\nWhen the activity is no longer visible to the user the system will invoke the onStop(). The app should release or adjust resources that are not needed while the app is not visible to the user. When the activity enters the stopped state, the activity object maintains all state and member information, but is not attached to window manager.</string>
    <string name="activity_onDestroy">onDestroy():\nIs called before the activity is destroyed. The system invokes this call back for two reasons. \n 1. The Activity is finished\n 2. The system is temporarily destroying the activity due to a configuration change.</string>
    <string name="activity_lifecycle_loops">Lifecycle Loops</string>
    <string name="activity_loop_entire">Entire Life:\nThe entire lifetime of an activity happens between teh first call to onCreate() through to a single final call to onDestory(). An activity will do all setup of global states in onCreate(), and release all remaining resources in onDestroy().</string>
    <string name="activity_loop_visible">Visible life:\n The visible lifetime of an activity happens between a call to onStart() until a corresponding call to onStop(). During this time the user can see the activity -on-screen, though it may not be in the foreground interacting with the user.</string>
    <string name="activity_loop_foreground">Foreground life:\nThe foreground lifetime of an activity happens between a call to onResume() until a corresponding call to onPause(). During this time the activity is invisible,a ctive and interacting with the user.</string>
    <string name="ac_lifecycle_aware_summary">Lifecycle-aware components: perform actions in response to a change in the lifecycle status of another component, such as activities and fragments. These components help you produce better-organized, adn often lighter-weight code, that is easier to maintain. Lifecycles are managed by the operating system or the framework code running in process.</string>
    <string name="delete_this">Activity</string>
    <string name="data_binding_summary">The Data Binding library is a support library that allows you to bind UI components in your layout o data sources in your app using a declarative format. DataBinding is the replacement for findViewById.</string>
    <string name="ac_data_binding_expression_language">Expression Language:\nAllows you to write expressions that connect variables to the view in the layout. The DB library generates the classes required to bind views in the layout with your data objects. \nVariable: Allows you to find data objects and methods to views in the layout.</string>
    <string name="ac_data_binding_generated_classes">Generated Classes: \nThe DB will generate binding class that are used to access the layout\'s variables and views. The generated class links the layout variables with the views in the layout.</string>
    <string name="ac_data_binding_binding_object">Binding Object: \nThe binding object is created immediately after inflating the layout to ensure that the view hierarchy isn\'t modified before it binds to the views with expressions in the layout. Use DataBindingUtil.inflate to inflate the binding class. In a fragment you will need to return the root of Binding object in onCreateView().</string>
    <string name="ac_data_binding_view_id">View with ID: \nThe DB creates a immutable filed in the binding class for each view that has an ID in the layout. The library extracts the views including the IDs fromt eh view hierarchy in a single pass. This is faster than calling findViewById for everyview.</string>
    <string name="ac_data_binding_observable_data">Observable data: \nThe DB Library can make objects, fields or collections observable. Any object can be used with data binding but modifying the object doesn\'t automatically cause the UI to update. DB can be used to give objects the ability to notify other objects, known as listeners, when data is chagned.</string>
    <string name="ac_data_binding_twoway_data_binding">Two-way DataBinding:\nUsing one-way data binding, you can set a value on an attribute and set a listener that reacts to a change in that attribute. The @={} notiation, includes the = sign, receives data changes to the property and listen to user updates at the same time.</string>


</resources>